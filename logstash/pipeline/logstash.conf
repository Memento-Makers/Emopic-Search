input {
    jdbc{
        jdbc_driver_library => "/usr/share/logstash/logstash-core/lib/jars/mysql-connector-java-8.0.21.jar"
        jdbc_driver_class => "com.mysql.cj.jdbc.Driver"
        jdbc_connection_string => "db-url"
        jdbc_user => "db-user"
        jdbc_password => "db-password"
        jdbc_pool_timeout => 10 #jdbc 접속 TimeOut 설정
        jdbc_paging_enabled => true
        tracking_column => "unix_ts_in_secs"
        use_column_value => true
        tracking_column_type => "numeric"
        statement => "your-query"
	      schedule => "*/60 * * * * *" # 1분에 한번씩 쿼리 실행
        last_run_metadata_path => "/usr/share/logstash/.logstash_jdbc_last_run"
    }
}

filter {
  mutate {
    split => {"class_list" => ","}
    remove_field => ["@version", "unix_ts_in_secs", "@timestamp"]
  }
}
output {
  #stdout { codec =>  "rubydebug"} # sqㅣ문으로 select한 데이터들을 터미널 창에 표시하겠다 ! -> 보통 프로덕션 환경에서는 잘 사용하지 않는다.
  elasticsearch {
    hosts => "elasticsearch:9200" # docker-compose의 service 명
		index => "" # 만들어지는 인덱스
    document_id => "%{id}" # table의 id를 document_id로 사용함.
  }
}
